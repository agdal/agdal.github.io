{"version":3,"sources":["Components/ClothCard.js","Components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","maxWidth","media","height","MediaCard","classes","Card","className","CardActionArea","CardMedia","image","title","CardContent","Typography","gutterBottom","variant","component","color","CardActions","Button","size","theme","display","appBar","zIndex","drawer","width","flexShrink","drawerPaper","drawerContainer","overflow","content","flexGrow","padding","spacing","Nav","CssBaseline","AppBar","position","Toolbar","noWrap","Drawer","paper","List","map","text","index","ListItem","button","key","ListItemText","primary","Divider","paragraph","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yXAUMA,EAAYC,YAAW,CAC5BC,KAAM,CACLC,SAAU,KAEXC,MAAO,CACNC,OAAQ,OAIK,SAASC,IACvB,IAAMC,EAAUP,IAEhB,OACC,kBAACQ,EAAA,EAAD,CAAMC,UAAWF,EAAQL,MACxB,kBAACQ,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CACCF,UAAWF,EAAQH,MACnBQ,MAAM,qCACNC,MAAM,0BAEP,kBAACC,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAhD,eAGA,kBAACH,EAAA,EAAD,CACCE,QAAQ,QACRE,MAAM,gBACND,UAAU,KAHX,mIAWF,kBAACE,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQH,MAAM,WAA3B,OAGA,kBAACE,EAAA,EAAD,CAAQC,KAAK,QAAQH,MAAM,WAA3B,gBClCJ,IAEMnB,EAAYC,aAAW,SAACsB,GAAD,MAAY,CACxCrB,KAAM,CACLsB,QAAS,QAEVC,OAAQ,CACPC,OAAQH,EAAMG,OAAOC,OAAS,GAE/BA,OAAQ,CACPC,MAVkB,IAWlBC,WAAY,GAEbC,YAAa,CACZF,MAdkB,KAgBnBG,gBAAiB,CAChBC,SAAU,QAEXC,QAAS,CACRC,SAAU,EACVC,QAASZ,EAAMa,QAAQ,QA+CVC,MA3Cf,WACC,IAAM9B,EAAUP,IAChB,OACC,yBAAKS,UAAWF,EAAQL,MACvB,kBAACoC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,QAAQ/B,UAAWF,EAAQkB,QAC3C,kBAACgB,EAAA,EAAD,KACC,kBAAC1B,EAAA,EAAD,CAAYE,QAAQ,KAAKyB,QAAM,GAA/B,mBAKF,kBAACC,EAAA,EAAD,CACClC,UAAWF,EAAQoB,OACnBV,QAAQ,YACRV,QAAS,CACRqC,MAAOrC,EAAQuB,cAGhB,kBAACW,EAAA,EAAD,MACA,yBAAKhC,UAAWF,EAAQwB,iBACvB,kBAACc,EAAA,EAAD,KACE,CAAC,OAAQ,OAAQ,UAAW,QAAS,OAAOC,KAC5C,SAACC,EAAMC,GAAP,OACC,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAKJ,GACrB,kBAACK,EAAA,EAAD,CAAcC,QAASN,SAK3B,kBAACO,EAAA,EAAD,QAGF,0BAAM7C,UAAWF,EAAQ0B,SACxB,kBAACQ,EAAA,EAAD,MACA,kBAAC1B,EAAA,EAAD,CAAYwC,WAAS,GACpB,kBAACjD,EAAD,UChEUkD,MARf,WACC,OACC,yBAAK/C,UAAU,OACd,kBAAC,EAAD,QCKiBgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1941bec3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n\troot: {\r\n\t\tmaxWidth: 345,\r\n\t},\r\n\tmedia: {\r\n\t\theight: 140,\r\n\t},\r\n});\r\n\r\nexport default function MediaCard() {\r\n\tconst classes = useStyles();\r\n\r\n\treturn (\r\n\t\t<Card className={classes.root}>\r\n\t\t\t<CardActionArea>\r\n\t\t\t\t<CardMedia\r\n\t\t\t\t\tclassName={classes.media}\r\n\t\t\t\t\timage=\"/public/src/Components/world1.jpeg\"\r\n\t\t\t\t\ttitle=\"Contemplative Reptile\"\r\n\t\t\t\t/>\r\n\t\t\t\t<CardContent>\r\n\t\t\t\t\t<Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n\t\t\t\t\t\tWorld Smile\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography\r\n\t\t\t\t\t\tvariant=\"body2\"\r\n\t\t\t\t\t\tcolor=\"textSecondary\"\r\n\t\t\t\t\t\tcomponent=\"p\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tLizards are a widespread group of squamate reptiles,\r\n\t\t\t\t\t\twith over 6,000 species, ranging across all continents\r\n\t\t\t\t\t\texcept Antarctica\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</CardContent>\r\n\t\t\t</CardActionArea>\r\n\t\t\t<CardActions>\r\n\t\t\t\t<Button size=\"small\" color=\"primary\">\r\n\t\t\t\t\tBuy\r\n\t\t\t\t</Button>\r\n\t\t\t\t<Button size=\"small\" color=\"primary\">\r\n\t\t\t\t\tLearn More\r\n\t\t\t\t</Button>\r\n\t\t\t</CardActions>\r\n\t\t</Card>\r\n\t);\r\n}\r\n","import React from 'react';\r\nimport { AppBar, Tabs, Tab } from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\n\r\nimport MediaCard from './ClothCard';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\troot: {\r\n\t\tdisplay: 'flex',\r\n\t},\r\n\tappBar: {\r\n\t\tzIndex: theme.zIndex.drawer + 1,\r\n\t},\r\n\tdrawer: {\r\n\t\twidth: drawerWidth,\r\n\t\tflexShrink: 0,\r\n\t},\r\n\tdrawerPaper: {\r\n\t\twidth: drawerWidth,\r\n\t},\r\n\tdrawerContainer: {\r\n\t\toverflow: 'auto',\r\n\t},\r\n\tcontent: {\r\n\t\tflexGrow: 1,\r\n\t\tpadding: theme.spacing(3),\r\n\t},\r\n}));\r\n\r\nfunction Nav() {\r\n\tconst classes = useStyles();\r\n\treturn (\r\n\t\t<div className={classes.root}>\r\n\t\t\t<CssBaseline />\r\n\t\t\t<AppBar position=\"fixed\" className={classes.appBar}>\r\n\t\t\t\t<Toolbar>\r\n\t\t\t\t\t<Typography variant=\"h6\" noWrap>\r\n\t\t\t\t\t\tTotis Viribus\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t</Toolbar>\r\n\t\t\t</AppBar>\r\n\t\t\t<Drawer\r\n\t\t\t\tclassName={classes.drawer}\r\n\t\t\t\tvariant=\"permanent\"\r\n\t\t\t\tclasses={{\r\n\t\t\t\t\tpaper: classes.drawerPaper,\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<Toolbar />\r\n\t\t\t\t<div className={classes.drawerContainer}>\r\n\t\t\t\t\t<List>\r\n\t\t\t\t\t\t{['Home', 'Shop', 'Contact', 'About', 'FAQ'].map(\r\n\t\t\t\t\t\t\t(text, index) => (\r\n\t\t\t\t\t\t\t\t<ListItem button key={text}>\r\n\t\t\t\t\t\t\t\t\t<ListItemText primary={text} />\r\n\t\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</List>\r\n\t\t\t\t\t<Divider />\r\n\t\t\t\t</div>\r\n\t\t\t</Drawer>\r\n\t\t\t<main className={classes.content}>\r\n\t\t\t\t<Toolbar />\r\n\t\t\t\t<Typography paragraph>\r\n\t\t\t\t\t<MediaCard />\r\n\t\t\t\t</Typography>\r\n\t\t\t</main>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Components/Nav';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Nav />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}